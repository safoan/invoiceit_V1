# ERD: InvoiceIt

This document explores the design of InvoiceIt an inventory Managment & invoice maker Combined together .

We'll use a basic client/server architecture, where a single server is deployed
on a cloud provider next to a relational database, and serving HTTP traffic from
a public endpoint.

## Storage

We'll use a relational database (schema follows) to fast retrieval of client , usres , inovices , product . database implementation such as postgress suffices. There will be no replication or sharding of data at
this early stage.

We ruled out storage-as-a-service services such as firebase and the like in
order to showcase building a standalone backend for educational purposes.

### Schema:

We'll need at least the following entities to implement the service:

**Users**:
| Column | Type |
|--------|------|
| ID | STRING/UUID |
| Password | STRING |
| Role | STRING |
| Username | STRING |

**Product**:
| Column | Type |
|--------|------|
| ID | STRING/UUID |
| Title | STRING |
| QT | NUMBER |
| PricUnit | STRING |

**Customer**:
| Column | Type |
|--------|------|
| CustomerId | STRING/UUID |
| customername | STRING |
| Phonenumbr | STRING |
| Email | STRING |
| Adress | STRING |

**invoice**:
| Column | Type |
|---------|------|
| InvoiceId | STRING/UUID |
| TotalPrice | STRING |
| ClientName | STRING |

## Server

A simple HTTP server is responsible for authentication, serving stored data, and
potentially ingesting and serving analytics data.

- Node.js is selected for implementing the server for speed of development.
- Express.js is the web server framework.
- Sequelize to be used as an ORM.

### Auth

For V1 , will the users be in the Data base and allowing them the acces to the software 

maybe For v2, a simple JWT-based auth mechanism is to be used, with passwords
encrypted and stored in the database. OAuth is to be added initially or later
for Google and maybe others .

### API

**Auth**:

```
/signIn  [POST]
/signUp  [POST]
/signOut [POST]
```

**Users**:

```
/User/new [POST]
/User/list [GET]
/User/:id  [DELETE]
```

**Product**:

```
/Product/list [GET]
/Product/new  [POST]
/Product/:id  [GET]
/Product/:id  [DELETE]
```

**Customer**:

```
/Customer/new [POST]
/Customer/list [GET]
/Customer/:id  [DELETE]

```

**Invoice**:

```
/Invoice/new  [POST]
/Invoice/list [GET]
/Invoice/:id  [DELETE]
```

## Clients

For now we'll start with a single web client, possibly adding mobile clients later.

The web client will be implemented in Angular.
See Figma/screenshots for details.
Uses tailwind for building the CSS components.

## Hosting

The code will be hosted on Github.

The web client will be hosted using any free web hosting platform such as firebase
or netlify. A domain will be purchased for the site, and configured to point to the
web host's server public IP.

We'll deploy the server to a (likely shared) VPS for flexibility. The VM will have
HTTP/HTTPS ports open, and we'll start with a manual deployment, to be automated
later using Github actions or similar. The server will have closed CORS policy except
for the domain name and the web host server.
